from expressionbackend import *
from genparser import *

class expParser(Parser):
	def __init__(self):
		super().__init__({0: LR0State(0,frozenset({LR0Item(0,Production(0,6,[7, 5],'E'),0,set()), LR0Item(4,Production(4,8,[9],'F'),0,set()), LR0Item(2,Production(2,7,[8],'T'),0,set()), LR0Item(3,Production(3,8,[8, 4, 9],'Mul(T,F)'),0,set()), LR0Item(1,Production(1,7,[7, 3, 8],'Add(E,T)'),0,set()), LR0Item(5,Production(5,9,[0],'Num(number)'),0,set()), LR0Item(6,Production(6,9,[1, 7, 2],'E'),0,set())}),{7: 1, 9: 2, 8: 3, 0: 4, 1: 5},False), 1: LR0State(1,frozenset({LR0Item(7,Production(0,6,[7, 5],'E'),1,set()), LR0Item(7,Production(1,7,[7, 3, 8],'Add(E,T)'),1,set())}),{5: 12, 3: 7},False), 2: LR0State(2,frozenset({LR0Item(7,Production(4,8,[9],'F'),1,{2, 3, 4, 5})}),{},False), 3: LR0State(3,frozenset({LR0Item(7,Production(2,7,[8],'T'),1,{2, 3, 5}), LR0Item(7,Production(3,8,[8, 4, 9],'Mul(T,F)'),1,set())}),{4: 10},False), 4: LR0State(4,frozenset({LR0Item(7,Production(5,9,[0],'Num(number)'),1,{2, 3, 4, 5})}),{},False), 5: LR0State(5,frozenset({LR0Item(1,Production(1,7,[7, 3, 8],'Add(E,T)'),0,set()), LR0Item(7,Production(6,9,[1, 7, 2],'E'),1,set()), LR0Item(4,Production(4,8,[9],'F'),0,set()), LR0Item(2,Production(2,7,[8],'T'),0,set()), LR0Item(3,Production(3,8,[8, 4, 9],'Mul(T,F)'),0,set()), LR0Item(5,Production(5,9,[0],'Num(number)'),0,set()), LR0Item(6,Production(6,9,[1, 7, 2],'E'),0,set())}),{7: 6, 9: 2, 8: 3, 0: 4, 1: 5},False), 6: LR0State(6,frozenset({LR0Item(7,Production(1,7,[7, 3, 8],'Add(E,T)'),1,set()), LR0Item(7,Production(6,9,[1, 7, 2],'E'),2,set())}),{3: 7, 2: 8},False), 7: LR0State(7,frozenset({LR0Item(1,Production(3,8,[8, 4, 9],'Mul(T,F)'),0,set()), LR0Item(3,Production(5,9,[0],'Num(number)'),0,set()), LR0Item(2,Production(1,7,[7, 3, 8],'Add(E,T)'),2,set()), LR0Item(2,Production(4,8,[9],'F'),0,set()), LR0Item(4,Production(6,9,[1, 7, 2],'E'),0,set())}),{8: 9, 0: 4, 9: 2, 1: 5},False), 8: LR0State(8,frozenset({LR0Item(2,Production(6,9,[1, 7, 2],'E'),3,{2, 3, 4, 5})}),{},False), 9: LR0State(9,frozenset({LR0Item(5,Production(3,8,[8, 4, 9],'Mul(T,F)'),1,set()), LR0Item(5,Production(1,7,[7, 3, 8],'Add(E,T)'),3,{2, 3, 5})}),{4: 10},False), 10: LR0State(10,frozenset({LR0Item(1,Production(5,9,[0],'Num(number)'),0,set()), LR0Item(2,Production(3,8,[8, 4, 9],'Mul(T,F)'),2,set()), LR0Item(2,Production(6,9,[1, 7, 2],'E'),0,set())}),{0: 4, 9: 11, 1: 5},False), 11: LR0State(11,frozenset({LR0Item(3,Production(3,8,[8, 4, 9],'Mul(T,F)'),3,{2, 3, 4, 5})}),{},False), 12: LR0State(12,frozenset({LR0Item(2,Production(0,6,[7, 5],'E'),2,set())}),{},True)},['number', "'('", "')'", "'+'", "'*'", 'endoffile', 'Start', 'E', 'T', 'F'])

	def eval(self,expression):
		return eval(expression)
