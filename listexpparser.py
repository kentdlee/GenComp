from listexpressionbackend import *
from parser import *

class listexpParser(Parser):
	def __init__(self):
		super().__init__({0: LR0State(0,frozenset({LR0Item(0,Production(0,11,[12, 10],'le'),0,set()), LR0Item(4,Production(4,13,[14],'lit'),0,set()), LR0Item(2,Production(2,12,[13],'lt'),0,set()), LR0Item(3,Production(3,13,[2, 4, 13],'Cons(Num(integer), lt)'),0,set()), LR0Item(1,Production(1,12,[12, 3, 13],'Append(le,lt)'),0,set()), LR0Item(5,Production(5,14,[5, 15, 6],'listSeq'),0,set()), LR0Item(6,Production(6,14,[0],'Nil()'),0,set())}),{0: 1, 2: 2, 5: 3, 12: 4, 13: 5, 14: 6},False), 1: LR0State(1,frozenset({LR0Item(7,Production(6,14,[0],'Nil()'),1,{10, 3})}),{},False), 2: LR0State(2,frozenset({LR0Item(7,Production(3,13,[2, 4, 13],'Cons(Num(integer), lt)'),1,set())}),{4: 15},False), 3: LR0State(3,frozenset({LR0Item(1,Production(7,15,[2],'Cons(Num(integer),Nil())'),0,set()), LR0Item(7,Production(5,14,[5, 15, 6],'listSeq'),1,set()), LR0Item(2,Production(8,15,[2, 7, 15],'Cons(Num(integer),listSeq)'),0,set()), LR0Item(3,Production(9,15,[],'Nil()'),0,{6})}),{2: 10, 15: 11},False), 4: LR0State(4,frozenset({LR0Item(7,Production(0,11,[12, 10],'le'),1,set()), LR0Item(7,Production(1,12,[12, 3, 13],'Append(le,lt)'),1,set())}),{10: 7, 3: 8},False), 5: LR0State(5,frozenset({LR0Item(7,Production(2,12,[13],'lt'),1,{10, 3})}),{},False), 6: LR0State(6,frozenset({LR0Item(7,Production(4,13,[14],'lit'),1,{10, 3})}),{},False), 7: LR0State(7,frozenset({LR0Item(2,Production(0,11,[12, 10],'le'),2,set())}),{},True), 8: LR0State(8,frozenset({LR0Item(1,Production(3,13,[2, 4, 13],'Cons(Num(integer), lt)'),0,set()), LR0Item(2,Production(1,12,[12, 3, 13],'Append(le,lt)'),2,set()), LR0Item(3,Production(5,14,[5, 15, 6],'listSeq'),0,set()), LR0Item(2,Production(4,13,[14],'lit'),0,set()), LR0Item(4,Production(6,14,[0],'Nil()'),0,set())}),{0: 1, 2: 2, 13: 9, 14: 6, 5: 3},False), 9: LR0State(9,frozenset({LR0Item(5,Production(1,12,[12, 3, 13],'Append(le,lt)'),3,{10, 3})}),{},False), 10: LR0State(10,frozenset({LR0Item(4,Production(7,15,[2],'Cons(Num(integer),Nil())'),1,{6}), LR0Item(4,Production(8,15,[2, 7, 15],'Cons(Num(integer),listSeq)'),1,set())}),{7: 13},False), 11: LR0State(11,frozenset({LR0Item(4,Production(5,14,[5, 15, 6],'listSeq'),2,set())}),{6: 12},False), 12: LR0State(12,frozenset({LR0Item(1,Production(5,14,[5, 15, 6],'listSeq'),3,{10, 3})}),{},False), 13: LR0State(13,frozenset({LR0Item(1,Production(7,15,[2],'Cons(Num(integer),Nil())'),0,set()), LR0Item(2,Production(8,15,[2, 7, 15],'Cons(Num(integer),listSeq)'),0,set()), LR0Item(2,Production(8,15,[2, 7, 15],'Cons(Num(integer),listSeq)'),2,set()), LR0Item(3,Production(9,15,[],'Nil()'),0,{6})}),{2: 10, 15: 14},False), 14: LR0State(14,frozenset({LR0Item(4,Production(8,15,[2, 7, 15],'Cons(Num(integer),listSeq)'),3,{6})}),{},False), 15: LR0State(15,frozenset({LR0Item(1,Production(3,13,[2, 4, 13],'Cons(Num(integer), lt)'),0,set()), LR0Item(1,Production(3,13,[2, 4, 13],'Cons(Num(integer), lt)'),2,set()), LR0Item(3,Production(5,14,[5, 15, 6],'listSeq'),0,set()), LR0Item(2,Production(4,13,[14],'lit'),0,set()), LR0Item(4,Production(6,14,[0],'Nil()'),0,set())}),{0: 1, 2: 2, 13: 16, 14: 6, 5: 3},False), 16: LR0State(16,frozenset({LR0Item(5,Production(3,13,[2, 4, 13],'Cons(Num(integer), lt)'),3,{10, 3})}),{},False)},["'nil'", 'identifier', 'integer', "'@'", "'::'", "'['", "']'", "','", 'stringconst', 'comment', 'endoffile', 'GOAL', 'le', 'lt', 'lit', 'listSeq'])

	def eval(self,expression):
		return eval(expression)
