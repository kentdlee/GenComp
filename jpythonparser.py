from jpythonbackend import *
from parser import *

class jpythonParser(Parser):
	def __init__(self):
		super().__init__({0: LR0State(0,frozenset({LR0Item(0,Production(0,39,[40, 38],'JBlock(Block)'),0,set()), LR0Item(1,Production(1,40,[41, 42, 43],'(FunDecs,VarDecs,Statements)'),0,set()), LR0Item(2,Production(2,41,[],'[]'),0,{12}), LR0Item(3,Production(3,41,[0, 15, 24, 44, 25, 45, 41],'[JFundec(identifier, ArgList,CompoundStatement)]+FunDecs'),0,set())}),{40: 1, 41: 2, 0: 3},False), 1: LR0State(1,frozenset({LR0Item(4,Production(0,39,[40, 38],'JBlock(Block)'),1,set())}),{38: 97},False), 2: LR0State(2,frozenset({LR0Item(1,Production(4,42,[],'[]'),0,{32, 1, 2, 7, 10, 15}), LR0Item(4,Production(1,40,[41, 42, 43],'(FunDecs,VarDecs,Statements)'),1,set()), LR0Item(2,Production(5,42,[12, 15, 35, 42],'[JDecl(identifier)]+VarDecs'),0,set())}),{42: 57, 12: 58},False), 3: LR0State(3,frozenset({LR0Item(4,Production(3,41,[0, 15, 24, 44, 25, 45, 41],'[JFundec(identifier, ArgList,CompoundStatement)]+FunDecs'),1,set())}),{15: 4},False), 4: LR0State(4,frozenset({LR0Item(1,Production(3,41,[0, 15, 24, 44, 25, 45, 41],'[JFundec(identifier, ArgList,CompoundStatement)]+FunDecs'),2,set())}),{24: 5},False), 5: LR0State(5,frozenset({LR0Item(4,Production(56,64,[53, 65, 64],'[Expression]+ExpressionList'),0,set()), LR0Item(8,Production(28,56,[57],'NotExpression'),0,set()), LR0Item(12,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(14,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(18,Production(44,61,[62],'Factor'),0,set()), LR0Item(22,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(26,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(2,Production(54,44,[64],'ExpressionList'),0,set()), LR0Item(6,Production(26,53,[56],'AndExpression'),0,set()), LR0Item(20,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(17,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(24,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(21,Production(47,62,[63],'FunCall'),0,set()), LR0Item(1,Production(53,44,[],'[]'),0,{25}), LR0Item(5,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),0,set()), LR0Item(9,Production(29,57,[5, 58],'NotExpr(RelExpression)'),0,set()), LR0Item(19,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(15,Production(41,59,[61],'Term'),0,set()), LR0Item(23,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(3,Production(55,64,[53],'[Expression]'),0,set()), LR0Item(7,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),0,set()), LR0Item(11,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(1,Production(3,41,[0, 15, 24, 44, 25, 45, 41],'[JFundec(identifier, ArgList,CompoundStatement)]+FunDecs'),3,set()), LR0Item(25,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(16,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set()), LR0Item(13,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(10,Production(30,57,[58],'RelExpression'),0,set())}),{64: 6, 36: 7, 5: 8, 44: 9, 13: 10, 14: 11, 15: 12, 16: 13, 24: 14, 53: 15, 56: 16, 57: 17, 58: 18, 59: 19, 61: 20, 62: 21, 63: 22},False), 6: LR0State(6,frozenset({LR0Item(27,Production(54,44,[64],'ExpressionList'),1,{25})}),{},False), 7: LR0State(7,frozenset({LR0Item(27,Production(51,62,[36],'strexpr(stringconst)'),1,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29})}),{},False), 8: LR0State(8,frozenset({LR0Item(2,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(4,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(6,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set()), LR0Item(8,Production(44,61,[62],'Factor'),0,set()), LR0Item(10,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(16,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(12,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(14,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(1,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(27,Production(29,57,[5, 58],'NotExpr(RelExpression)'),1,set()), LR0Item(3,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(5,Production(41,59,[61],'Term'),0,set()), LR0Item(7,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(9,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(13,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(15,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(11,Production(47,62,[63],'FunCall'),0,set())}),{16: 13, 61: 20, 36: 7, 62: 21, 24: 14, 15: 12, 58: 56, 59: 19, 13: 10, 14: 11, 63: 22},False), 9: LR0State(9,frozenset({LR0Item(27,Production(3,41,[0, 15, 24, 44, 25, 45, 41],'[JFundec(identifier, ArgList,CompoundStatement)]+FunDecs'),4,set())}),{25: 50},False), 10: LR0State(10,frozenset({LR0Item(27,Production(49,62,[13],'boolexpr(True)'),1,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29})}),{},False), 11: LR0State(11,frozenset({LR0Item(27,Production(50,62,[14],'boolexpr(False)'),1,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29})}),{},False), 12: LR0State(12,frozenset({LR0Item(27,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),1,set()), LR0Item(27,Production(45,62,[15],'identexpr(identifier)'),1,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29})}),{24: 47},False), 13: LR0State(13,frozenset({LR0Item(27,Production(46,62,[16],'intexpr(integer)'),1,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29})}),{},False), 14: LR0State(14,frozenset({LR0Item(2,Production(56,64,[53, 65, 64],'[Expression]+ExpressionList'),0,set()), LR0Item(27,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),1,set()), LR0Item(6,Production(28,56,[57],'NotExpression'),0,set()), LR0Item(10,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(12,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(20,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(16,Production(44,61,[62],'Factor'),0,set()), LR0Item(24,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(4,Production(26,53,[56],'AndExpression'),0,set()), LR0Item(8,Production(30,57,[58],'RelExpression'),0,set()), LR0Item(18,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(22,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(19,Production(47,62,[63],'FunCall'),0,set()), LR0Item(3,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),0,set()), LR0Item(7,Production(29,57,[5, 58],'NotExpr(RelExpression)'),0,set()), LR0Item(21,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(17,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(13,Production(41,59,[61],'Term'),0,set()), LR0Item(1,Production(55,64,[53],'[Expression]'),0,set()), LR0Item(5,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),0,set()), LR0Item(9,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(15,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(11,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(23,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(14,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set())}),{64: 45, 36: 7, 5: 8, 13: 10, 14: 11, 15: 12, 16: 13, 24: 14, 53: 15, 56: 16, 57: 17, 58: 18, 59: 19, 61: 20, 62: 21, 63: 22},False), 15: LR0State(15,frozenset({LR0Item(27,Production(56,64,[53, 65, 64],'[Expression]+ExpressionList'),1,set()), LR0Item(27,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),1,set()), LR0Item(27,Production(55,64,[53],'[Expression]'),1,{25})}),{65: 41, 6: 42},False), 16: LR0State(16,frozenset({LR0Item(27,Production(26,53,[56],'AndExpression'),1,{32, 1, 2, 35, 6, 7, 10, 11, 15, 25}), LR0Item(27,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),1,set())}),{4: 39},False), 17: LR0State(17,frozenset({LR0Item(27,Production(28,56,[57],'NotExpression'),1,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 25})}),{},False), 18: LR0State(18,frozenset({LR0Item(27,Production(30,57,[58],'RelExpression'),1,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 25})}),{},False), 19: LR0State(19,frozenset({LR0Item(4,Production(33,60,[17],"'>='"),0,set()), LR0Item(27,Production(32,58,[59],'NumExpression'),1,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 25}), LR0Item(27,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),1,set()), LR0Item(27,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),1,set()), LR0Item(27,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),1,set()), LR0Item(5,Production(34,60,[18],"'<='"),0,set()), LR0Item(6,Production(35,60,[21],"'>'"),0,set()), LR0Item(7,Production(36,60,[22],"'<'"),0,set()), LR0Item(8,Production(37,60,[19],"'=='"),0,set()), LR0Item(9,Production(38,60,[20],"'!='"),0,set())}),{17: 27, 18: 28, 19: 29, 20: 30, 21: 31, 22: 32, 26: 33, 27: 34, 60: 35},False), 20: LR0State(20,frozenset({LR0Item(27,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),1,set()), LR0Item(27,Production(41,59,[61],'Term'),1,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27}), LR0Item(27,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),1,set())}),{28: 23, 29: 24},False), 21: LR0State(21,frozenset({LR0Item(27,Production(44,61,[62],'Factor'),1,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29})}),{},False), 22: LR0State(22,frozenset({LR0Item(27,Production(47,62,[63],'FunCall'),1,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29})}),{},False), 23: LR0State(23,frozenset({LR0Item(1,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(2,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(3,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),2,set()), LR0Item(3,Production(47,62,[63],'FunCall'),0,set()), LR0Item(4,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(5,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(6,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(7,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(8,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set())}),{16: 13, 36: 7, 62: 25, 24: 14, 63: 22, 13: 10, 14: 11, 15: 12},False), 24: LR0State(24,frozenset({LR0Item(1,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(2,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(3,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),2,set()), LR0Item(3,Production(47,62,[63],'FunCall'),0,set()), LR0Item(4,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(5,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(6,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(7,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(8,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set())}),{16: 13, 36: 7, 62: 26, 24: 14, 63: 22, 13: 10, 14: 11, 15: 12},False), 25: LR0State(25,frozenset({LR0Item(9,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),3,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29})}),{},False), 26: LR0State(26,frozenset({LR0Item(9,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),3,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29})}),{},False), 27: LR0State(27,frozenset({LR0Item(10,Production(33,60,[17],"'>='"),1,{36, 13, 14, 15, 16, 24})}),{},False), 28: LR0State(28,frozenset({LR0Item(10,Production(34,60,[18],"'<='"),1,{36, 13, 14, 15, 16, 24})}),{},False), 29: LR0State(29,frozenset({LR0Item(10,Production(37,60,[19],"'=='"),1,{36, 13, 14, 15, 16, 24})}),{},False), 30: LR0State(30,frozenset({LR0Item(10,Production(38,60,[20],"'!='"),1,{36, 13, 14, 15, 16, 24})}),{},False), 31: LR0State(31,frozenset({LR0Item(10,Production(35,60,[21],"'>'"),1,{36, 13, 14, 15, 16, 24})}),{},False), 32: LR0State(32,frozenset({LR0Item(10,Production(36,60,[22],"'<'"),1,{36, 13, 14, 15, 16, 24})}),{},False), 33: LR0State(33,frozenset({LR0Item(1,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set()), LR0Item(2,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(10,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),2,set()), LR0Item(3,Production(44,61,[62],'Factor'),0,set()), LR0Item(4,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(5,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(6,Production(47,62,[63],'FunCall'),0,set()), LR0Item(7,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(8,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(9,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(11,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(10,Production(51,62,[36],'strexpr(stringconst)'),0,set())}),{16: 13, 61: 38, 36: 7, 62: 21, 24: 14, 63: 22, 13: 10, 14: 11, 15: 12},False), 34: LR0State(34,frozenset({LR0Item(1,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set()), LR0Item(2,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(10,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),2,set()), LR0Item(3,Production(44,61,[62],'Factor'),0,set()), LR0Item(4,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(5,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(6,Production(47,62,[63],'FunCall'),0,set()), LR0Item(7,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(8,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(9,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(11,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(10,Production(51,62,[36],'strexpr(stringconst)'),0,set())}),{16: 13, 61: 37, 36: 7, 62: 21, 24: 14, 63: 22, 13: 10, 14: 11, 15: 12},False), 35: LR0State(35,frozenset({LR0Item(1,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(2,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(10,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),2,set()), LR0Item(3,Production(41,59,[61],'Term'),0,set()), LR0Item(4,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set()), LR0Item(5,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(6,Production(44,61,[62],'Factor'),0,set()), LR0Item(7,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(8,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(9,Production(47,62,[63],'FunCall'),0,set()), LR0Item(11,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(14,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(13,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(10,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(12,Production(50,62,[14],'boolexpr(False)'),0,set())}),{16: 13, 61: 20, 36: 7, 62: 21, 24: 14, 15: 12, 59: 36, 13: 10, 14: 11, 63: 22},False), 36: LR0State(36,frozenset({LR0Item(15,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),1,set()), LR0Item(15,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),1,set()), LR0Item(15,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),3,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 25})}),{26: 33, 27: 34},False), 37: LR0State(37,frozenset({LR0Item(12,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),1,set()), LR0Item(12,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),1,set()), LR0Item(12,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),3,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27})}),{28: 23, 29: 24},False), 38: LR0State(38,frozenset({LR0Item(12,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),1,set()), LR0Item(12,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),1,set()), LR0Item(12,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),3,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27})}),{28: 23, 29: 24},False), 39: LR0State(39,frozenset({LR0Item(2,Production(30,57,[58],'RelExpression'),0,set()), LR0Item(4,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(6,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(8,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set()), LR0Item(12,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(18,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(14,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(16,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(10,Production(44,61,[62],'Factor'),0,set()), LR0Item(1,Production(29,57,[5, 58],'NotExpr(RelExpression)'),0,set()), LR0Item(3,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(2,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),2,set()), LR0Item(5,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(7,Production(41,59,[61],'Term'),0,set()), LR0Item(9,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(15,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(17,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(11,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(13,Production(47,62,[63],'FunCall'),0,set())}),{36: 7, 5: 8, 13: 10, 14: 11, 15: 12, 16: 13, 24: 14, 57: 40, 58: 18, 59: 19, 61: 20, 62: 21, 63: 22},False), 40: LR0State(40,frozenset({LR0Item(19,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),3,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 25})}),{},False), 41: LR0State(41,frozenset({LR0Item(2,Production(56,64,[53, 65, 64],'[Expression]+ExpressionList'),0,set()), LR0Item(6,Production(28,56,[57],'NotExpression'),0,set()), LR0Item(3,Production(56,64,[53, 65, 64],'[Expression]+ExpressionList'),2,set()), LR0Item(10,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(12,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(20,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(16,Production(44,61,[62],'Factor'),0,set()), LR0Item(24,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(4,Production(26,53,[56],'AndExpression'),0,set()), LR0Item(8,Production(30,57,[58],'RelExpression'),0,set()), LR0Item(18,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(22,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(19,Production(47,62,[63],'FunCall'),0,set()), LR0Item(3,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),0,set()), LR0Item(7,Production(29,57,[5, 58],'NotExpr(RelExpression)'),0,set()), LR0Item(21,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(17,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(13,Production(41,59,[61],'Term'),0,set()), LR0Item(1,Production(55,64,[53],'[Expression]'),0,set()), LR0Item(5,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),0,set()), LR0Item(9,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(15,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(11,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(23,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(14,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set())}),{64: 44, 36: 7, 5: 8, 13: 10, 14: 11, 15: 12, 16: 13, 24: 14, 53: 15, 56: 16, 57: 17, 58: 18, 59: 19, 61: 20, 62: 21, 63: 22},False), 42: LR0State(42,frozenset({LR0Item(2,Production(28,56,[57],'NotExpression'),0,set()), LR0Item(4,Production(30,57,[58],'RelExpression'),0,set()), LR0Item(6,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(8,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(14,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(20,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(16,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(10,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set()), LR0Item(18,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(12,Production(44,61,[62],'Factor'),0,set()), LR0Item(15,Production(47,62,[63],'FunCall'),0,set()), LR0Item(1,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),0,set()), LR0Item(3,Production(29,57,[5, 58],'NotExpr(RelExpression)'),0,set()), LR0Item(3,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),2,set()), LR0Item(5,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(7,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(9,Production(41,59,[61],'Term'),0,set()), LR0Item(11,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(17,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(19,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(13,Production(45,62,[15],'identexpr(identifier)'),0,set())}),{36: 7, 5: 8, 13: 10, 14: 11, 15: 12, 16: 13, 24: 14, 56: 43, 57: 17, 58: 18, 59: 19, 61: 20, 62: 21, 63: 22},False), 43: LR0State(43,frozenset({LR0Item(21,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),1,set()), LR0Item(21,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),3,{32, 1, 2, 35, 6, 7, 10, 11, 15, 25})}),{4: 39},False), 44: LR0State(44,frozenset({LR0Item(25,Production(56,64,[53, 65, 64],'[Expression]+ExpressionList'),3,{25})}),{},False), 45: LR0State(45,frozenset({LR0Item(25,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),2,set())}),{25: 46},False), 46: LR0State(46,frozenset({LR0Item(1,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),3,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29})}),{},False), 47: LR0State(47,frozenset({LR0Item(4,Production(56,64,[53, 65, 64],'[Expression]+ExpressionList'),0,set()), LR0Item(8,Production(28,56,[57],'NotExpression'),0,set()), LR0Item(2,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),2,set()), LR0Item(12,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(14,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(18,Production(44,61,[62],'Factor'),0,set()), LR0Item(22,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(26,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(2,Production(54,44,[64],'ExpressionList'),0,set()), LR0Item(6,Production(26,53,[56],'AndExpression'),0,set()), LR0Item(20,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(24,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(21,Production(47,62,[63],'FunCall'),0,set()), LR0Item(1,Production(53,44,[],'[]'),0,{25}), LR0Item(5,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),0,set()), LR0Item(9,Production(29,57,[5, 58],'NotExpr(RelExpression)'),0,set()), LR0Item(19,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(15,Production(41,59,[61],'Term'),0,set()), LR0Item(23,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(3,Production(55,64,[53],'[Expression]'),0,set()), LR0Item(7,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),0,set()), LR0Item(11,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(17,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(25,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(16,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set()), LR0Item(13,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(10,Production(30,57,[58],'RelExpression'),0,set())}),{64: 6, 36: 7, 5: 8, 44: 48, 13: 10, 14: 11, 15: 12, 16: 13, 24: 14, 53: 15, 56: 16, 57: 17, 58: 18, 59: 19, 61: 20, 62: 21, 63: 22},False), 48: LR0State(48,frozenset({LR0Item(27,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),3,set())}),{25: 49},False), 49: LR0State(49,frozenset({LR0Item(1,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),4,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29})}),{},False), 50: LR0State(50,frozenset({LR0Item(1,Production(9,45,[32, 40, 33],'JBlock(Block)'),0,set()), LR0Item(1,Production(3,41,[0, 15, 24, 44, 25, 45, 41],'[JFundec(identifier, ArgList,CompoundStatement)]+FunDecs'),5,set())}),{32: 51, 45: 52},False), 51: LR0State(51,frozenset({LR0Item(1,Production(1,40,[41, 42, 43],'(FunDecs,VarDecs,Statements)'),0,set()), LR0Item(2,Production(9,45,[32, 40, 33],'JBlock(Block)'),1,set()), LR0Item(2,Production(2,41,[],'[]'),0,{12}), LR0Item(3,Production(3,41,[0, 15, 24, 44, 25, 45, 41],'[JFundec(identifier, ArgList,CompoundStatement)]+FunDecs'),0,set())}),{40: 54, 41: 2, 0: 3},False), 52: LR0State(52,frozenset({LR0Item(1,Production(2,41,[],'[]'),0,{12}), LR0Item(2,Production(3,41,[0, 15, 24, 44, 25, 45, 41],'[JFundec(identifier, ArgList,CompoundStatement)]+FunDecs'),0,set()), LR0Item(2,Production(3,41,[0, 15, 24, 44, 25, 45, 41],'[JFundec(identifier, ArgList,CompoundStatement)]+FunDecs'),6,set())}),{0: 3, 41: 53},False), 53: LR0State(53,frozenset({LR0Item(3,Production(3,41,[0, 15, 24, 44, 25, 45, 41],'[JFundec(identifier, ArgList,CompoundStatement)]+FunDecs'),7,{12})}),{},False), 54: LR0State(54,frozenset({LR0Item(4,Production(9,45,[32, 40, 33],'JBlock(Block)'),2,set())}),{33: 55},False), 55: LR0State(55,frozenset({LR0Item(1,Production(9,45,[32, 40, 33],'JBlock(Block)'),3,{0, 1, 2, 35, 32, 7, 10, 11, 15})}),{},False), 56: LR0State(56,frozenset({LR0Item(17,Production(29,57,[5, 58],'NotExpr(RelExpression)'),2,{32, 1, 2, 35, 4, 6, 7, 10, 11, 15, 25})}),{},False), 57: LR0State(57,frozenset({LR0Item(1,Production(6,43,[],'[]'),0,{33, 38}), LR0Item(3,Production(8,46,[47, 35],'Statement'),0,set()), LR0Item(4,Production(10,47,[48],'AssignmentStmt'),0,set()), LR0Item(6,Production(12,47,[50],'IfStmt'),0,set()), LR0Item(8,Production(14,47,[52],'ForStmt'),0,set()), LR0Item(12,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),0,set()), LR0Item(10,Production(16,48,[15, 23, 53],'JAssign(identifier,Expression)'),0,set()), LR0Item(14,Production(24,52,[10, 15, 8, 53, 47],'For(identifier,Expression,Statement)'),0,set()), LR0Item(2,Production(7,43,[46, 43],'[TerminatedStatement]+Statements'),0,set()), LR0Item(5,Production(11,47,[49],'ReturnStmt'),0,set()), LR0Item(3,Production(1,40,[41, 42, 43],'(FunDecs,VarDecs,Statements)'),2,set()), LR0Item(7,Production(13,47,[51],'WhileStmt'),0,set()), LR0Item(9,Production(15,47,[45],'CompoundStmt'),0,set()), LR0Item(11,Production(17,49,[7, 54],'JReturn(OptionalExpression)'),0,set()), LR0Item(13,Production(23,51,[2, 24, 53, 25, 47],'While(Expression,Statement)'),0,set()), LR0Item(15,Production(9,45,[32, 40, 33],'JBlock(Block)'),0,set())}),{32: 51, 1: 62, 2: 63, 7: 64, 10: 65, 43: 66, 45: 67, 46: 68, 15: 69, 48: 70, 49: 71, 50: 72, 51: 73, 52: 74, 47: 75},False), 58: LR0State(58,frozenset({LR0Item(3,Production(5,42,[12, 15, 35, 42],'[JDecl(identifier)]+VarDecs'),1,set())}),{15: 59},False), 59: LR0State(59,frozenset({LR0Item(1,Production(5,42,[12, 15, 35, 42],'[JDecl(identifier)]+VarDecs'),2,set())}),{35: 60},False), 60: LR0State(60,frozenset({LR0Item(1,Production(4,42,[],'[]'),0,set()), LR0Item(2,Production(5,42,[12, 15, 35, 42],'[JDecl(identifier)]+VarDecs'),0,set()), LR0Item(1,Production(5,42,[12, 15, 35, 42],'[JDecl(identifier)]+VarDecs'),3,set())}),{42: 61, 12: 58},False), 61: LR0State(61,frozenset({LR0Item(3,Production(5,42,[12, 15, 35, 42],'[JDecl(identifier)]+VarDecs'),4,{32, 1, 2, 7, 10, 15})}),{},False), 62: LR0State(62,frozenset({LR0Item(16,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),1,set())}),{24: 80},False), 63: LR0State(63,frozenset({LR0Item(16,Production(23,51,[2, 24, 53, 25, 47],'While(Expression,Statement)'),1,set())}),{24: 76},False), 64: LR0State(64,frozenset({LR0Item(6,Production(28,56,[57],'NotExpression'),0,set()), LR0Item(10,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(12,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(20,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(16,Production(44,61,[62],'Factor'),0,set()), LR0Item(24,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(1,Production(18,54,[],'None'),0,{32, 1, 2, 35, 7, 10, 11, 15}), LR0Item(4,Production(26,53,[56],'AndExpression'),0,set()), LR0Item(8,Production(30,57,[58],'RelExpression'),0,set()), LR0Item(18,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(22,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(19,Production(47,62,[63],'FunCall'),0,set()), LR0Item(3,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),0,set()), LR0Item(16,Production(17,49,[7, 54],'JReturn(OptionalExpression)'),1,set()), LR0Item(7,Production(29,57,[5, 58],'NotExpr(RelExpression)'),0,set()), LR0Item(21,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(17,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(13,Production(41,59,[61],'Term'),0,set()), LR0Item(2,Production(19,54,[53],'Expression'),0,set()), LR0Item(5,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),0,set()), LR0Item(9,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(15,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(23,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(14,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set()), LR0Item(11,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set())}),{36: 7, 5: 8, 13: 10, 14: 11, 15: 12, 16: 13, 24: 14, 53: 95, 54: 96, 56: 16, 57: 17, 58: 18, 59: 19, 61: 20, 62: 21, 63: 22},False), 65: LR0State(65,frozenset({LR0Item(16,Production(24,52,[10, 15, 8, 53, 47],'For(identifier,Expression,Statement)'),1,set())}),{15: 91},False), 66: LR0State(66,frozenset({LR0Item(16,Production(1,40,[41, 42, 43],'(FunDecs,VarDecs,Statements)'),3,{33, 38})}),{},False), 67: LR0State(67,frozenset({LR0Item(16,Production(15,47,[45],'CompoundStmt'),1,{32, 1, 2, 35, 7, 10, 11, 15})}),{},False), 68: LR0State(68,frozenset({LR0Item(1,Production(6,43,[],'[]'),0,{33, 38}), LR0Item(3,Production(8,46,[47, 35],'Statement'),0,set()), LR0Item(4,Production(10,47,[48],'AssignmentStmt'),0,set()), LR0Item(6,Production(12,47,[50],'IfStmt'),0,set()), LR0Item(8,Production(14,47,[52],'ForStmt'),0,set()), LR0Item(12,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),0,set()), LR0Item(10,Production(16,48,[15, 23, 53],'JAssign(identifier,Expression)'),0,set()), LR0Item(14,Production(24,52,[10, 15, 8, 53, 47],'For(identifier,Expression,Statement)'),0,set()), LR0Item(2,Production(7,43,[46, 43],'[TerminatedStatement]+Statements'),0,set()), LR0Item(16,Production(7,43,[46, 43],'[TerminatedStatement]+Statements'),1,set()), LR0Item(5,Production(11,47,[49],'ReturnStmt'),0,set()), LR0Item(7,Production(13,47,[51],'WhileStmt'),0,set()), LR0Item(9,Production(15,47,[45],'CompoundStmt'),0,set()), LR0Item(11,Production(17,49,[7, 54],'JReturn(OptionalExpression)'),0,set()), LR0Item(13,Production(23,51,[2, 24, 53, 25, 47],'While(Expression,Statement)'),0,set()), LR0Item(15,Production(9,45,[32, 40, 33],'JBlock(Block)'),0,set())}),{32: 51, 1: 62, 2: 63, 7: 64, 10: 65, 43: 90, 45: 67, 46: 68, 15: 69, 48: 70, 49: 71, 50: 72, 51: 73, 52: 74, 47: 75},False), 69: LR0State(69,frozenset({LR0Item(16,Production(16,48,[15, 23, 53],'JAssign(identifier,Expression)'),1,set())}),{23: 88},False), 70: LR0State(70,frozenset({LR0Item(16,Production(10,47,[48],'AssignmentStmt'),1,{32, 1, 2, 35, 7, 10, 11, 15})}),{},False), 71: LR0State(71,frozenset({LR0Item(16,Production(11,47,[49],'ReturnStmt'),1,{32, 1, 2, 35, 7, 10, 11, 15})}),{},False), 72: LR0State(72,frozenset({LR0Item(16,Production(12,47,[50],'IfStmt'),1,{32, 1, 2, 35, 7, 10, 11, 15})}),{},False), 73: LR0State(73,frozenset({LR0Item(16,Production(13,47,[51],'WhileStmt'),1,{32, 1, 2, 35, 7, 10, 11, 15})}),{},False), 74: LR0State(74,frozenset({LR0Item(16,Production(14,47,[52],'ForStmt'),1,{32, 1, 2, 35, 7, 10, 11, 15})}),{},False), 75: LR0State(75,frozenset({LR0Item(16,Production(8,46,[47, 35],'Statement'),1,set())}),{35: 87},False), 76: LR0State(76,frozenset({LR0Item(4,Production(28,56,[57],'NotExpression'),0,set()), LR0Item(8,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(10,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(18,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(14,Production(44,61,[62],'Factor'),0,set()), LR0Item(22,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(2,Production(26,53,[56],'AndExpression'),0,set()), LR0Item(6,Production(30,57,[58],'RelExpression'),0,set()), LR0Item(16,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(12,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set()), LR0Item(20,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(17,Production(47,62,[63],'FunCall'),0,set()), LR0Item(1,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),0,set()), LR0Item(5,Production(29,57,[5, 58],'NotExpr(RelExpression)'),0,set()), LR0Item(19,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(15,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(11,Production(41,59,[61],'Term'),0,set()), LR0Item(3,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),0,set()), LR0Item(7,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(1,Production(23,51,[2, 24, 53, 25, 47],'While(Expression,Statement)'),2,set()), LR0Item(9,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(13,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(21,Production(51,62,[36],'strexpr(stringconst)'),0,set())}),{36: 7, 5: 8, 13: 10, 14: 11, 15: 12, 16: 13, 24: 14, 53: 77, 56: 16, 57: 17, 58: 18, 59: 19, 61: 20, 62: 21, 63: 22},False), 77: LR0State(77,frozenset({LR0Item(23,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),1,set()), LR0Item(23,Production(23,51,[2, 24, 53, 25, 47],'While(Expression,Statement)'),3,set())}),{25: 78, 6: 42},False), 78: LR0State(78,frozenset({LR0Item(1,Production(10,47,[48],'AssignmentStmt'),0,set()), LR0Item(2,Production(11,47,[49],'ReturnStmt'),0,set()), LR0Item(3,Production(12,47,[50],'IfStmt'),0,set()), LR0Item(4,Production(13,47,[51],'WhileStmt'),0,set()), LR0Item(2,Production(23,51,[2, 24, 53, 25, 47],'While(Expression,Statement)'),4,set()), LR0Item(5,Production(14,47,[52],'ForStmt'),0,set()), LR0Item(6,Production(15,47,[45],'CompoundStmt'),0,set()), LR0Item(7,Production(16,48,[15, 23, 53],'JAssign(identifier,Expression)'),0,set()), LR0Item(8,Production(17,49,[7, 54],'JReturn(OptionalExpression)'),0,set()), LR0Item(9,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),0,set()), LR0Item(10,Production(23,51,[2, 24, 53, 25, 47],'While(Expression,Statement)'),0,set()), LR0Item(11,Production(24,52,[10, 15, 8, 53, 47],'For(identifier,Expression,Statement)'),0,set()), LR0Item(12,Production(9,45,[32, 40, 33],'JBlock(Block)'),0,set())}),{32: 51, 1: 62, 2: 63, 7: 64, 10: 65, 45: 67, 15: 69, 48: 70, 49: 71, 50: 72, 51: 73, 52: 74, 47: 79},False), 79: LR0State(79,frozenset({LR0Item(13,Production(23,51,[2, 24, 53, 25, 47],'While(Expression,Statement)'),5,{32, 1, 2, 35, 7, 10, 11, 15})}),{},False), 80: LR0State(80,frozenset({LR0Item(4,Production(28,56,[57],'NotExpression'),0,set()), LR0Item(8,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(1,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),2,set()), LR0Item(10,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(18,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(14,Production(44,61,[62],'Factor'),0,set()), LR0Item(22,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(2,Production(26,53,[56],'AndExpression'),0,set()), LR0Item(6,Production(30,57,[58],'RelExpression'),0,set()), LR0Item(16,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(20,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(17,Production(47,62,[63],'FunCall'),0,set()), LR0Item(1,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),0,set()), LR0Item(5,Production(29,57,[5, 58],'NotExpr(RelExpression)'),0,set()), LR0Item(19,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(15,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(11,Production(41,59,[61],'Term'),0,set()), LR0Item(3,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),0,set()), LR0Item(7,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(9,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(13,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(21,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(12,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set())}),{36: 7, 5: 8, 13: 10, 14: 11, 15: 12, 16: 13, 24: 14, 53: 81, 56: 16, 57: 17, 58: 18, 59: 19, 61: 20, 62: 21, 63: 22},False), 81: LR0State(81,frozenset({LR0Item(23,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),1,set()), LR0Item(23,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),3,set())}),{25: 82, 6: 42},False), 82: LR0State(82,frozenset({LR0Item(1,Production(10,47,[48],'AssignmentStmt'),0,set()), LR0Item(2,Production(11,47,[49],'ReturnStmt'),0,set()), LR0Item(3,Production(12,47,[50],'IfStmt'),0,set()), LR0Item(4,Production(13,47,[51],'WhileStmt'),0,set()), LR0Item(2,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),4,set()), LR0Item(5,Production(14,47,[52],'ForStmt'),0,set()), LR0Item(6,Production(15,47,[45],'CompoundStmt'),0,set()), LR0Item(7,Production(16,48,[15, 23, 53],'JAssign(identifier,Expression)'),0,set()), LR0Item(8,Production(17,49,[7, 54],'JReturn(OptionalExpression)'),0,set()), LR0Item(9,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),0,set()), LR0Item(10,Production(23,51,[2, 24, 53, 25, 47],'While(Expression,Statement)'),0,set()), LR0Item(11,Production(24,52,[10, 15, 8, 53, 47],'For(identifier,Expression,Statement)'),0,set()), LR0Item(12,Production(9,45,[32, 40, 33],'JBlock(Block)'),0,set())}),{32: 51, 1: 62, 2: 63, 7: 64, 10: 65, 45: 67, 15: 69, 48: 70, 49: 71, 50: 72, 51: 73, 52: 74, 47: 83},False), 83: LR0State(83,frozenset({LR0Item(1,Production(21,55,[],'Pass'),0,{32, 1, 2, 35, 7, 10, 11, 15}), LR0Item(2,Production(22,55,[11, 47],'Statement'),0,set()), LR0Item(13,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),5,set())}),{11: 84, 55: 85},False), 84: LR0State(84,frozenset({LR0Item(1,Production(10,47,[48],'AssignmentStmt'),0,set()), LR0Item(3,Production(22,55,[11, 47],'Statement'),1,set()), LR0Item(2,Production(11,47,[49],'ReturnStmt'),0,set()), LR0Item(3,Production(12,47,[50],'IfStmt'),0,set()), LR0Item(4,Production(13,47,[51],'WhileStmt'),0,set()), LR0Item(5,Production(14,47,[52],'ForStmt'),0,set()), LR0Item(6,Production(15,47,[45],'CompoundStmt'),0,set()), LR0Item(7,Production(16,48,[15, 23, 53],'JAssign(identifier,Expression)'),0,set()), LR0Item(8,Production(17,49,[7, 54],'JReturn(OptionalExpression)'),0,set()), LR0Item(9,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),0,set()), LR0Item(10,Production(23,51,[2, 24, 53, 25, 47],'While(Expression,Statement)'),0,set()), LR0Item(11,Production(24,52,[10, 15, 8, 53, 47],'For(identifier,Expression,Statement)'),0,set()), LR0Item(12,Production(9,45,[32, 40, 33],'JBlock(Block)'),0,set())}),{32: 51, 1: 62, 2: 63, 7: 64, 10: 65, 45: 67, 15: 69, 48: 70, 49: 71, 50: 72, 51: 73, 52: 74, 47: 86},False), 85: LR0State(85,frozenset({LR0Item(3,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),6,{32, 1, 2, 35, 7, 10, 11, 15})}),{},False), 86: LR0State(86,frozenset({LR0Item(13,Production(22,55,[11, 47],'Statement'),2,{32, 1, 2, 35, 7, 10, 11, 15})}),{},False), 87: LR0State(87,frozenset({LR0Item(1,Production(8,46,[47, 35],'Statement'),2,{32, 1, 2, 7, 10, 15})}),{},False), 88: LR0State(88,frozenset({LR0Item(4,Production(28,56,[57],'NotExpression'),0,set()), LR0Item(8,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(1,Production(16,48,[15, 23, 53],'JAssign(identifier,Expression)'),2,set()), LR0Item(10,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(18,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(14,Production(44,61,[62],'Factor'),0,set()), LR0Item(22,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(2,Production(26,53,[56],'AndExpression'),0,set()), LR0Item(6,Production(30,57,[58],'RelExpression'),0,set()), LR0Item(16,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(20,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(17,Production(47,62,[63],'FunCall'),0,set()), LR0Item(1,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),0,set()), LR0Item(5,Production(29,57,[5, 58],'NotExpr(RelExpression)'),0,set()), LR0Item(19,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(15,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(11,Production(41,59,[61],'Term'),0,set()), LR0Item(3,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),0,set()), LR0Item(7,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(9,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(13,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(21,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(12,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set())}),{36: 7, 5: 8, 13: 10, 14: 11, 15: 12, 16: 13, 24: 14, 53: 89, 56: 16, 57: 17, 58: 18, 59: 19, 61: 20, 62: 21, 63: 22},False), 89: LR0State(89,frozenset({LR0Item(23,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),1,set()), LR0Item(23,Production(16,48,[15, 23, 53],'JAssign(identifier,Expression)'),3,{32, 1, 2, 35, 7, 10, 11, 15})}),{6: 42},False), 90: LR0State(90,frozenset({LR0Item(16,Production(7,43,[46, 43],'[TerminatedStatement]+Statements'),2,{33, 38})}),{},False), 91: LR0State(91,frozenset({LR0Item(1,Production(24,52,[10, 15, 8, 53, 47],'For(identifier,Expression,Statement)'),2,set())}),{8: 92},False), 92: LR0State(92,frozenset({LR0Item(4,Production(28,56,[57],'NotExpression'),0,set()), LR0Item(8,Production(32,58,[59],'NumExpression'),0,set()), LR0Item(10,Production(40,59,[59, 27, 61],'SubExpr(NumExpression,Term)'),0,set()), LR0Item(1,Production(24,52,[10, 15, 8, 53, 47],'For(identifier,Expression,Statement)'),3,set()), LR0Item(18,Production(48,62,[24, 64, 25],'tuple(ExpressionList)'),0,set()), LR0Item(14,Production(44,61,[62],'Factor'),0,set()), LR0Item(22,Production(52,63,[15, 24, 44, 25],'funcall(identifier,ArgList)'),0,set()), LR0Item(2,Production(26,53,[56],'AndExpression'),0,set()), LR0Item(6,Production(30,57,[58],'RelExpression'),0,set()), LR0Item(16,Production(46,62,[16],'intexpr(integer)'),0,set()), LR0Item(20,Production(50,62,[14],'boolexpr(False)'),0,set()), LR0Item(17,Production(47,62,[63],'FunCall'),0,set()), LR0Item(1,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),0,set()), LR0Item(5,Production(29,57,[5, 58],'NotExpr(RelExpression)'),0,set()), LR0Item(19,Production(49,62,[13],'boolexpr(True)'),0,set()), LR0Item(15,Production(45,62,[15],'identexpr(identifier)'),0,set()), LR0Item(11,Production(41,59,[61],'Term'),0,set()), LR0Item(3,Production(27,56,[56, 4, 57],'AndExpr(AndExpression,NotExpression)'),0,set()), LR0Item(7,Production(31,58,[59, 60, 59],'relexpr(RelOp,NumExpression1,NumExpression2)'),0,set()), LR0Item(9,Production(39,59,[59, 26, 61],'AddExpr(NumExpression,Term)'),0,set()), LR0Item(13,Production(43,61,[61, 29, 62],'divexpr(Term,Factor)'),0,set()), LR0Item(21,Production(51,62,[36],'strexpr(stringconst)'),0,set()), LR0Item(12,Production(42,61,[61, 28, 62],'mulexpr(Term,Factor)'),0,set())}),{36: 7, 5: 8, 13: 10, 14: 11, 15: 12, 16: 13, 24: 14, 53: 93, 56: 16, 57: 17, 58: 18, 59: 19, 61: 20, 62: 21, 63: 22},False), 93: LR0State(93,frozenset({LR0Item(2,Production(10,47,[48],'AssignmentStmt'),0,set()), LR0Item(23,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),1,set()), LR0Item(3,Production(11,47,[49],'ReturnStmt'),0,set()), LR0Item(4,Production(12,47,[50],'IfStmt'),0,set()), LR0Item(23,Production(24,52,[10, 15, 8, 53, 47],'For(identifier,Expression,Statement)'),4,set()), LR0Item(5,Production(13,47,[51],'WhileStmt'),0,set()), LR0Item(6,Production(14,47,[52],'ForStmt'),0,set()), LR0Item(7,Production(15,47,[45],'CompoundStmt'),0,set()), LR0Item(8,Production(16,48,[15, 23, 53],'JAssign(identifier,Expression)'),0,set()), LR0Item(9,Production(17,49,[7, 54],'JReturn(OptionalExpression)'),0,set()), LR0Item(10,Production(20,50,[1, 24, 53, 25, 47, 55],'If(Expression,Statement,OptionalElse)'),0,set()), LR0Item(11,Production(23,51,[2, 24, 53, 25, 47],'While(Expression,Statement)'),0,set()), LR0Item(12,Production(24,52,[10, 15, 8, 53, 47],'For(identifier,Expression,Statement)'),0,set()), LR0Item(13,Production(9,45,[32, 40, 33],'JBlock(Block)'),0,set())}),{32: 51, 1: 62, 2: 63, 6: 42, 7: 64, 10: 65, 45: 67, 15: 69, 48: 70, 49: 71, 50: 72, 51: 73, 52: 74, 47: 94},False), 94: LR0State(94,frozenset({LR0Item(14,Production(24,52,[10, 15, 8, 53, 47],'For(identifier,Expression,Statement)'),5,{32, 1, 2, 35, 7, 10, 11, 15})}),{},False), 95: LR0State(95,frozenset({LR0Item(25,Production(25,53,[53, 6, 56],'OrExpr(Expression,AndExpression)'),1,set()), LR0Item(25,Production(19,54,[53],'Expression'),1,{32, 1, 2, 35, 7, 10, 11, 15})}),{6: 42},False), 96: LR0State(96,frozenset({LR0Item(25,Production(17,49,[7, 54],'JReturn(OptionalExpression)'),2,{32, 1, 2, 35, 7, 10, 11, 15})}),{},False), 97: LR0State(97,frozenset({LR0Item(1,Production(0,39,[40, 38],'JBlock(Block)'),2,set())}),{},True)},["'def'", "'if'", "'while'", "'len'", "'and'", "'not'", "'or'", "'return'", "'in'", "'None'", "'for'", "'else'", "'decl'", "'True'", "'False'", 'identifier', 'integer', "'>='", "'<='", "'=='", "'!='", "'>'", "'<'", "'='", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'['", "']'", "'{'", "'}'", "','", "';'", 'stringconst', 'comment', 'endoffile', 'Program', 'Block', 'FunDecs', 'VarDecs', 'Statements', 'ArgList', 'CompoundStmt', 'TerminatedStatement', 'Statement', 'AssignmentStmt', 'ReturnStmt', 'IfStmt', 'WhileStmt', 'ForStmt', 'Expression', 'OptionalExpression', 'OptionalElse', 'AndExpression', 'NotExpression', 'RelExpression', 'NumExpression', 'RelOp', 'Term', 'Factor', 'FunCall', 'ExpressionList', 'comma', 'IdentList'])

	def eval(self,expression):
		return eval(expression)
